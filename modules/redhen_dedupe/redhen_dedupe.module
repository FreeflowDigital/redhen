<?php

/**
 * Implements hook_menu().
 */
function redhen_dedupe_menu() {
  $items['redhen/dedupe'] = array(
    'title' => 'Find duplicate contacts',
    'page callback' => 'redhen_dedupe_list_page',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['redhen/dedupe/merge/%'] = array(
    'title' => 'Select a primary contact',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('redhen_dedupe_merge_form', 3),
    'access arguments' => array('access content'),
    'file' => 'includes/redhen_dedupe.form.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['redhen/dedupe/merge_details/%/%'] = array(
    'title' => 'Select a primary contact',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('redhen_dedupe_merge_details_form', 3, 4),
    'access arguments' => array('access content'),
    'file' => 'includes/redhen_dedupe.form.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Page callback for listing duplicate contacts.
 *
 * @return array
 *   Render array for a table of duplicates.
 */
function redhen_dedupe_list_page() {
  $results = redhen_dedupe_get_duplicates();
  if (!empty($results)) {
    $rows = array();
    foreach ($results as $result) {
      $rows[] = array(
        $result->first_name,
        $result->last_name,
        $result->count,
        l(t('merge'), 'redhen/dedupe/merge/' . $result->ids),
      );
    }

    return theme('table', array(
      'header' => array(
        t('First name'),
        t('Las name'),
        t('Count'),
        '',
      ),
      'rows' => $rows,
    ));
  }
  else {
    return t('There are no duplicate contacts, congratulations!');
  }
}

/**
 * Get duplicate contacts.
 *
 * @return array
 *   Array of objects containing first, last, and ids.
 */
function redhen_dedupe_get_duplicates() {
  $query = db_select('redhen_contact', 'rc');
  $query->addField('rc', 'first_name');
  $query->addField('rc', 'last_name');
  $query->groupBy('first_name');
  $query->groupBy('last_name');
  $query->addExpression('COUNT(*)', 'count');
  $query->addExpression('GROUP_CONCAT(contact_id SEPARATOR \',\')', 'ids');
  $query->havingCondition('count', '1', '>');

  return $query->execute()->fetchAll();
}

/**
 * Merge values from contacts into master contact and handle related entities.
 *
 * @param $master
 *   The master RedHen Contact.
 * @param array $contacts
 *   The contacts being merged into the master.
 * @param array $values
 *   Values to update the master contact with.
 * @param array $related_entities
 *   Array of entity types to update to the master contact.
 *
 * @return boolean
 */
function redhen_dedupe_merge($master, $contacts, $values, $related_entities) {
  $master_wrapper = entity_metadata_wrapper('redhen_contact', $master);
  $master_id = $master_wrapper->internalIdentifier();

  $transaction = db_transaction();
  try {
    // Iterate through all contacts and update or delete related entities.
    foreach ($contacts as $contact) {
      $contact_id = $contact->internalIdentifier();
      // Don't act on the master contact.
      if ($contact_id == $master_id) {
        continue;
      }

      // Update related entities:
      foreach ($related_entities as $entity_type) {
        switch ($entity_type) {
          case 'redhen_note':
          case 'redhen_engagement':
          case 'redhen_membership':
            $query = new EntityFieldQuery();
            $query->entityCondition('entity_type', $entity_type);
            $query->propertyCondition('entity_type', 'redhen_contact');
            $query->propertyCondition('entity_id', $contact_id);
            $result = $query->execute();
            $rel_entities = entity_load($entity_type, array_keys($result[$entity_type]));
            foreach ($rel_entities as $rel_entity) {
              $rel_entity->entity_id = $master_id;
              entity_save($entity_type, $rel_entity);
            }
            break;

          case 'relation':

            break;

          // @TODO entity_reference
        }

      }


      // @TODO Delete or archive the contact based on submitted value.
    }

    // Set the new values on the master contact
    foreach ($values as $id => $value) {
      $master_wrapper->{$id}->set($value);
    }

    $master_wrapper->save();

    return TRUE;
  }
  catch (Exception $e) {
    $transaction->rollback();
    watchdog_exception('redhen_dedupe', $e);
  }
}
