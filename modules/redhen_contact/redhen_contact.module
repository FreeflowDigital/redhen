<?php

/**
 * @file
 * Contains redhen_contact.module..
 */

use Drupal\Core\Entity\Entity\EntityFormDisplay;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\redhen_contact\Entity\Contact;
use Drupal\redhen_contact\Entity\ContactType;

/**
 * Denotes that the contact is not active.
 */
const REDHEN_CONTACT_INACTIVE = 0;

/**
 * Denotes that the node is active.
 */
const REDHEN_CONTACT_ACTIVE = 1;

/**
 * Implements hook_help().
 */
function redhen_contact_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the redhen_contact module.
    case 'help.page.redhen_contact':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Defines the base contact entity and features.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function redhen_contact_theme() {
  $theme = [];
  $theme['redhen_contact'] = [
    'render element' => 'elements',
    'file' => 'redhen_contact.page.inc',
    'template' => 'redhen_contact',
  ];
  $theme['redhen_contact_content_add_list'] = [
    'render element' => 'content',
    'variables' => ['content' => NULL],
    'file' => 'redhen_contact.page.inc',
  ];
  return $theme;
}

/**
 * Return an associative array of contact types to be used as an options list.
 *
 * @return array
 *   Keyed by name with a label value.
 */
function redhen_contact_type_options_list() {
  $options = array();
  foreach (ContactType::loadMultiple() as $type) {
    $options[$type->id()] = $type->label();
  }

  return $options;
}

/**
 * Implements hook_form_FORM_ID_alter() on the user_register_form.
 */
function redhen_contact_form_user_register_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {

  // Get Redhen Contact settings.
  $config = \Drupal::config('redhen_contact.settings');
  // Check whether we should create a Contact on User registration.
  if ($config->get('connect_users')) {

    // Get menu item to check for overridden Contact Type parameter, but only
    // when a user is registering from user/register.
    $url_exploded = array_slice(explode('/', \Drupal::request()->getRequestUri()), 1);
    if ($url_exploded[0] == 'user' && $url_exploded[1] == 'register' && isset($url_exploded[2])) {
      $contact_type = $url_exploded[2];
    }
    else {
      // If a parameter was not passed, use the default contact type.
      $contact_type = $config->get('registration_type');
    }

    // If a valid contact type was found, embed fields from the Contact Type on
    // the user registration form.
    $types = redhen_contact_type_options_list();
    if (array_key_exists($contact_type, $types)) {
      $contact_object = Contact::create(['type' => $contact_type]);
      _redhen_contact_user_embed_contact_form($form, $form_state, $contact_object);
      // Hide the Contact email field, we will use the user mail field.
      $form['redhen_contact']['email']['#access'] = FALSE;
      // Add a validation handler for validating the Contact form data.
      $form['#validate'][] = 'redhen_contact_user_registration_validate';
      // Add a submit handler for handling the Contact form data.
      $form['#submit'][] = 'redhen_contact_user_registration_submit';
    }
    else {
      drupal_set_message(t('Invalid RedHen contact type parameter.'));
    }
  }
}

/**
 * Helper function to embed a contact form on a user form.
 *
 * Usage note: make sure to add a submit handler, otherwise this form data will
 * just be ignored.
 *
 * @param array $form
 *   Form array.
 * @param array $form_state
 *   Form state array.
 * @param Contact $contact
 *   The Contact to build the form on.
 */
function _redhen_contact_user_embed_contact_form(&$form, &$form_state, Contact $contact) {

  // Create form element to hold Contact fields.
  $form['redhen_contact'] = [
    '#type' => 'details',
    '#title' => str_replace('!type', ContactType::load($contact->getType())->label(), '!type Contact information'),
    '#tree' => TRUE,
    '#parents' => ['redhen_contact'],
    '#open' => TRUE,
  ];
  // Add EntityFormDisplay object used to build an entity form.
  $form_state->set('form_display_' . $contact->getType(), EntityFormDisplay::collectRenderDisplay($contact, 'default'));
  // Build the entityform into the placeholder form element created above.
  $form_state
    ->get('form_display_' . $contact->getType())
    // Add fields to the placeholder form element created above.
    ->buildForm($contact, $form['redhen_contact'], $form_state);

  // Add hidden form element to store type of Contact being created.
  $form['redhen_contact']['contact_type'] = [
    '#type' => 'hidden',
    // Do not allow this value to be altered via JavaScript before the form is
    // submitted - setting "#default_value" would allow for that.
    '#value' => $contact->getType(),
  ];
}

/**
 * Registration form RedHen contact validation handler.
 */
function redhen_contact_user_registration_validate($form, &$form_state) {

  // Load existing Contact by email address if one exists.
  $existing_contacts = Contact::loadByMail($form_state->getValue('mail'));
  $contact = $existing_contacts ? current($existing_contacts) : [];
  // Check whether we should update info of an existing Contact using info
  // provided on user_registration form.
  $update_existing = \Drupal::config('redhen_contact.settings')
    ->get('registration_update');

  // We have an existing contact, but it's of a different type.
  if ($contact && $contact->getType() !== $form['redhen_contact']['contact_type']['#value']) {
    $form_state->setError($form['account']['mail'], str_replace(['!type', '!email'], [$contact->getType(), $form_state->getValue('mail')], 'A Contact of type "!type" is already associated with the email address "!email".'));
  }

  // We don't want to update contacts, but found an existing match.
  if ($contact && !$update_existing) {
    $form_state->setError($form['account']['mail'], 'A contact already exists with that email address.');
  }

  // Existing contact is already linked to a user.
  if ($contact && !is_null($contact->getUserId()) && $update_existing) {
    $form_state->setError($form['account']['mail'], 'A contact with that email address is already linked to a Drupal user.');
  }
}

// @todo - add redhen_contact_user_registration_submit function
