<?php


/**
 * OG selection handler.
 */
class RedhenGroupSelectionHandler implements EntityReference_SelectionHandler {

  protected function __construct($field, $instance) {
    $this->field = $field;
    $this->instance = $instance;
  }

  /**
   * Factory function: create a new instance of this handler for a given field.
   *
   * @param $field
   *   A field datastructure.
   * @return EntityReferenceHandler
   */
  public static function getInstance($field, $instance) {
    return new RedhenGroupSelectionHandler($field, $instance);
  }

  /**
   * Return a list of referencable entities.
   */
  public function getReferencableEntities($match = NULL, $match_operator = 'CONTAINS', $limit = 0) {
    $entities = array();
    foreach ($this->getContactGroups() as $org_id => $org) {
      $entities[$org_id] = $this->getLabel($org);
    }

    return $entities;
  }

  protected function getContactGroups() {
    $orgs = array();
    $org_types = redhen_org_get_types();
    $valid_org_types = array();
    foreach ($org_types as $org_type) {
      if (isset($org_type->group) && $org_type->group && $org_type->redhen_state = REDHEN_STATE_ACTIVE) {
        if (isset($org_type->group_settings['content_types'])) {
          if (in_array($this->instance['bundle'], $org_type->group_settings['content_types'])) {
            $valid_org_types[] = $org_type->name;
          }
        }
      }
    }

    global $user;
    if ($contact = redhen_contact_user_contact($user)) {
      $relations = redhen_relation_relations($contact, 'redhen_affiliation');
      foreach ($relations as $relation_id => $orgs) {
        foreach ($orgs as $org) {
          if (in_array($org->type, $valid_org_types)) {
            $orgs[$org->org_id] = $org;
          }
        }
      }
    }

    return $orgs;
  }

  /**
   * Count entities that are referencable by a given field.
   */
  public function countReferencableEntities($match = NULL, $match_operator = 'CONTAINS') {
    return count($this->getContactGroups());
  }

  /**
   * Validate that entities can be referenced by this field.
   *
   * @return
   *   An array of entity ids that are valid.
   */
  public function validateReferencableEntities(array $ids) {
    $ids = array();
    foreach ($this->getContactGroups() as $org_id => $org) {
      $ids[] = $org_id;
    }
    return $ids;
  }

  /**
   * Give the handler a chance to alter the SelectQuery generated by EntityFieldQuery.
   */
  public function entityFieldQueryAlter(SelectQueryInterface $query) {

  }

  /**
   * Return the label of a given entity.
   */
  public function getLabel($entity) {
    return entity_label($this->field['settings']['target_type'], $entity);
  }

  /**
   * Generate a settings form for this handler.
   */
  public static function settingsForm($field, $instance) {
    return array();
  }
}
