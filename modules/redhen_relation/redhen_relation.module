<?php

define('REDHEN_RELATION_STATUS_FIELD', 'redhen_relation_status');

/**
 * Implements hook_menu().
 */
function redhen_relation_menu() {
  $items = array();

  // contact connections
  $items['redhen/contact/%redhen_contact/connections'] = array(
    'title' => 'Connections',
    'page callback' => 'redhen_relation_connections_page',
    'page arguments' => array(2),
    'access callback' => 'redhen_contact_access',
    'access arguments' => array('view', 2),
    'type' => MENU_LOCAL_TASK,
  );
  $items['redhen/contact/%redhen_contact/connections/add'] = array(
    'title' => 'Add Connection',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('redhen_relation_connection_form', 2),
    'file' => 'includes/redhen_relation.forms.inc',
    'access callback' => 'redhen_contact_access',
    'access arguments' => array('edit', 2),
    'type' => MENU_LOCAL_ACTION,
  );

  // org connections
  $items['redhen/org/%redhen_org/connections'] = array(
    'title' => 'Connections',
    'page callback' => 'redhen_relation_connections_page',
    'page arguments' => array(2),
    'access callback' => 'redhen_org_access',
    'access arguments' => array('view', 2),
    'type' => MENU_LOCAL_TASK,
  );
  $items['redhen/org/%redhen_org/connections/add'] = array(
    'title' => 'Add Connection',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('redhen_relation_connection_form', 2),
    'file' => 'includes/redhen_relation.forms.inc',
    'access callback' => 'redhen_org_access',
    'access arguments' => array('edit', 2),
    'type' => MENU_LOCAL_ACTION,
  );

  return $items;
}

/**
 * Page callback for listing connections.
 *
 * @param RedhenContact $contact
 * @return array|null|string
 */
function redhen_relation_connections_page(RedhenContact $contact) {
  $query = relation_query('redhen_contact', $contact->contact_id);
  $results = $query->execute();
  if ($results) {
    $relations = relation_load_multiple(array_keys($results));
    foreach($relations as $relation) {
      $relation_type = relation_type_load($relation->relation_type);
      $relation_uri = entity_uri('relation', $relation);
      list($relation_id,,) = entity_extract_ids('relation', $relation);

      $duplicate = FALSE; // To make sure duplicates of $entity get included in object list.

      // Gramatical predicate of teh sentence.
      $predicate = $relation_type->directional ? $relation_type->reverse_label : $relation_type->label;

      foreach ($relation->endpoints[LANGUAGE_NONE] as $endpoint) {
        // Add all entities that aren't this entity or duplicates
        if ($endpoint['entity_type'] == $contact->entityType() && $endpoint['entity_id'] == $contact->internalIdentifier() && $duplicate == FALSE) {
          $duplicate = TRUE;
          // Use the forward label as sentence predicate if r_index == 0.
          // (only makes a difference if relation is directional).
          if ($endpoint['r_index'] == 0) {
            $predicate = ' ' . $relation_type->label;
          }
        }
        else {
          $object_entities = entity_load($endpoint['entity_type'], array($endpoint['entity_id']));
          $object_entity = reset($object_entities);
          $object_label = entity_label($endpoint['entity_type'], $object_entity);
          $object_uri = entity_uri($endpoint['entity_type'], $object_entity);
          $author = user_load($relation->uid);
          $operations = array(
            l('edit', $relation_uri['path'] . '/edit'),
            l('delete', $relation_uri['path'] . '/delete'),
          );

          $rows[] = array(
            l($predicate, $relation_uri['path']),
            l($object_label, $object_uri['path']),
            $relation->{REDHEN_RELATION_STATUS_FIELD}[LANGUAGE_NONE][0]['value'],
            $object_entity->entityType(),
            date('m/d/Y', $relation->created),
            $author->name,
            implode(' | ', $operations)
          );
        }
      }
    }

    $header = array(t('Connection'), t('Label'), t('Status'), t('Type'),
      t('Created'), t('Author'), t('Actions'));

    return array(
      '#theme' => 'table',
      '#header' => $header,
      '#rows' => $rows
    );
  }

  return t('%name has no connections.', array('%name' => $contact->name));
}
