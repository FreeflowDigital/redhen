<?php

/**
 * @file
 * Contains redhen_connection.module..
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\redhen_connection\Entity\ConnectionType;
use Drupal\redhen_connection\Access\ConnectionAccessResult;
use Drupal\redhen_contact\Entity\Contact;

/**
 * Denotes that the Connection is not active.
 */
const REDHEN_CONNECTION_INACTIVE = 0;

/**
 * Denotes that the Connection is active.
 */
const REDHEN_CONNECTION_ACTIVE = 1;


/**
 * Specifies the number of endpoint fields we ship with.
 */
const REDHEN_CONNECTION_ENDPOINTS = 2;

/**
 * Implements hook_help().
 */
function redhen_connection_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the redhen_connection module.
    case 'help.page.redhen_connection':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Defines the base connection entity and features.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function redhen_connection_theme() {
  $theme = [];
  $theme['redhen_connection'] = [
    'render element' => 'elements',
    'file' => 'redhen_connection.page.inc',
    'template' => 'redhen_connection',
  ];
  $theme['redhen_connection_content_add_list'] = [
    'render element' => 'content',
    'variables' => ['content' => NULL, 'entity' => NULL],
    'file' => 'redhen_connection.page.inc',
  ];
  return $theme;
}

/**
 * Return an associative array of Connection types to be used as an options list.
 *
 * @return array
 *   Keyed by name with a label value.
 */
function redhen_connection_type_options_list() {
  $options = array();
  foreach (ConnectionType::loadMultiple() as $type) {
    $options[$type->id()] = $type->label();
  }

  return $options;
}

/**
 * Implements hook_entity_access().
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 * @param $operation
 * @param \Drupal\Core\Session\AccountInterface $account
 * @return mixed
 */
function redhen_connection_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {
  if (in_array($entity->getEntityTypeId(), ['redhen_contact', 'redhen_org'])){
    return ConnectionAccessResult::allowedIfHasConnectionPermission($entity, $account, $operation);
  }

  if ($entity->getEntityTypeId() == 'redhen_connection') {
    // Allow access to a connection via indirectly connected redhen_contact
    // entity if the contact associated with the current user is connected to
    // the indirectly connected contact.

    // Get redhen_contact endpoint fields from the connection type.
    $connection_type = ConnectionType::load($entity->bundle());
    $contact_endpoint_fields = $connection_type->getEndpointFields('redhen_contact');
    // Loop over contact fields and get the indirectly connected contact entity.
    foreach ($contact_endpoint_fields as $contact_endpoint_field) {
      $contact = $entity->get($contact_endpoint_field)->entity;
      // If we get a contact, check if the contact associated with the current
      // user is connected to it and has access.
      if ($contact) {
        // @todo - add connection type to this call so we don't allow access if
        // any connection type allows the passed operation - will require
        // updating the function to take the additional parameter
        return ConnectionAccessResult::allowedIfHasConnectionPermission($contact, $account, $operation);
      }
    }
  }
  return ConnectionAccessResult::neutral();
}
