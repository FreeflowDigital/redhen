<?php

/**
 * @file
 * Redhen Memberships main module
 *
 */


/**
 * Implements hook_entity_info().
 */
function redhen_membership_entity_info() {
  return array(
    'redhen_membership' => array(
      'label' => t('Membership'),
      'controller class' => 'RedhenMembershipEntityController',
      'metadata controller class' => 'RedhenMembershipMetadataController',
      'entity class' => 'RedhenMembership',
      'base table' => 'redhen_membership',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'membership_id',
        'bundle' => 'type',
      ),
      'bundle keys' => array(
        'bundle' => 'name',
      ),
      'bundles' => array(),
      'view modes' => array(
        'full' => array(
          'label' => t('Full membership'),
          'custom settings' => FALSE,
        ),
      ),
      'uri callback' => 'entity_class_uri',
      'token type' => 'redhen_membership',
      'module' => 'redhen_membership',
      'label callback' => 'entity_class_label',
      'access callback' => 'redhen_membership_access'
    ),
    'redhen_membership_type' => array(
      'label' => t('Membership type'),
      'entity class' => 'RedhenMembershipType',
      'controller class' => 'EntityAPIControllerExportable',
      'base table' => 'redhen_membership_type',
      'fieldable' => FALSE,
      'bundle of' => 'redhen_membership',
      'exportable' => TRUE,
      'token type' => 'redhen_membership_type',
      'entity keys' => array(
        'id' => 'membership_type_id',
        'name' => 'name',
        'label' => 'label',
      ),
      'access callback' => 'redhen_membership_type_access',
      'module' => 'redhen_membership',
      // Enable the entity API's admin UI.
      'admin ui' => array(
        'path' => 'admin/structure/redhen/membership_types',
        'file' => 'redhen_membership_type.admin.inc',
        'file path' => drupal_get_path('module', 'redhen_membership') . '/includes',
        'controller class' => 'RedhenMembershipTypeUIController',
      ),
    ),
  );
}

/**
 * Implements hook_entity_info_alter().
 *
 * We are adding the info about the membership types via a hook to avoid a recursion
 * issue as loading the model types requires the entity info as well.
 */
function redhen_membership_entity_info_alter(&$entity_info) {
  // @todo: we're testing to ensure the schema exists; needed because running gui
  // install profile was hitting this BEFORE the schema was installed.
  if (drupal_get_schema('redhen_membership')) {
    foreach (redhen_membership_get_types() as $type => $info) {
      $entity_info['redhen_membership']['bundles'][$type] = array(
        'label' => $info->label,
        'admin' => array(
          'path' => 'admin/structure/redhen/membership_types/manage/%redhen_membership_type',
          'real path' => 'admin/structure/redhen/membership_types/manage/' . $type,
          'bundle argument' => 5,
          'access arguments' => array('administer redhen_membership types'),
        ),
      );
    }
  }
}

/**
 * Implements hook_menu().
 */
function redhen_membership_menu() {
  $items = array();

  $items['redhen/memberships'] = array(
    'title' => 'Memberships',
    'page callback' => 'redhen_membership_page',
    'access callback' => 'redhen_membership_access',
    'access arguments' => array('view'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/redhen_membership.pages.inc',
  );

  foreach (redhen_entity_types() as $entity_type => $path) {
    $items["redhen/{$path}/%{$entity_type}/memberships"] = array(
      'title' => 'Memberships',
      'page callback' => 'redhen_membership_page',
      'page arguments' => array(2, $entity_type),
      'access callback' => $entity_type . '_access',
      'access arguments' => array('view', 2),
      'type' => MENU_LOCAL_TASK,
      'file' => 'includes/redhen_membership.pages.inc',
      'weight' => -3,
    );
    $items["redhen/{$path}/%{$entity_type}/memberships/add"] = array(
      'title' => 'Add Membership',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('redhen_membership_membership_form', NULL, 2, $entity_type),
      'access callback' => 'redhen_membership_access',
      'access arguments' => array('edit', 2),
      'type' => MENU_LOCAL_ACTION,
      'file' => 'includes/redhen_membership.forms.inc',
    );
  }

  $items['redhen/membership/%redhen_membership'] = array(
    'title callback' => 'redhen_membership_membership_title',
    'title arguments' => array(2),
    'page callback' => 'redhen_membership_view',
    'page arguments' => array(2),
    'access callback' => 'redhen_membership_access',
    'access arguments' => array('view', 2),
    'weight' => 10,
  );
  $items['redhen/membership/%redhen_membership/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  $items['redhen/membership/%redhen_membership/edit'] = array(
    'title' => 'Edit Membership',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('redhen_membership_membership_form', 2),
    'access callback' => 'redhen_membership_access',
    'access arguments' => array('edit', 2),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/redhen_membership.forms.inc',
  );
  $items['redhen/membership/%redhen_membership/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('redhen_membership_membership_delete_form', 2),
    'access callback' => 'redhen_membership_access',
    'access arguments' => array('delete', 2),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
    'file' => 'includes/redhen_membership.forms.inc',
  );

  $items['redhen/membership/%redhen_membership/archive'] = array(
    'title' => 'Archive',
    'page callback' => 'redhen_membership_archive',
    'page arguments' => array(2),
    'access callback' => 'redhen_membership_access',
    'access arguments' => array('edit', 2),
    'type' => MENU_CALLBACK,
  );

  if (module_exists('devel')) {
    $items['redhen/membership/%redhen_membership/devel'] = array(
      'title' => 'Devel',
      'page callback' => 'redhen_devel_load_object',
      'page arguments' => array('redhen_membership', 2),
      'access arguments' => array('access devel information'),
      'type' => MENU_LOCAL_TASK,
      'weight' => 100,
    );
    $items['redhen/membership/%redhen_membership/devel/load'] = array(
      'title' => 'Load',
      'type' => MENU_DEFAULT_LOCAL_TASK,
    );
    $items['redhen/membership/%redhen_membership/devel/render'] = array(
      'title' => 'Render',
      'page callback' => 'redhen_devel_render_object',
      'page arguments' => array('redhen_membership', 2),
      'access arguments' => array('access devel information'),
      'type' => MENU_LOCAL_TASK,
      'weight' => 100,
    );
  }

  return $items;
}

/**
 * Implements hook_theme().
 */
function redhen_membership_theme() {
  return array(
    'redhen_membership_add_list' => array(
      'variables' => array('content' => NULL),
    ),
    'redhen_membership_list' => array(
      'variables' => array('memberships' => NULL, 'header' => NULL),
    )
  );
}

/**
 * Loads a membership by ID.
 */
function redhen_membership_load($membership_id) {
  if (empty($membership_id)) {
    return FALSE;
  }

  $memberships = redhen_membership_load_multiple(array($membership_id), array());
  return $memberships ? reset($memberships) : FALSE;
}

/**
 * Loads multiple memberships by ID or based on a set of matching conditions.
 *
 * @see entity_load()
 *
 * @param $membership_ids
 *   An array of membership IDs.
 * @param $conditions
 *   An array of conditions on the {redhen_membership} table in the form
 *     'field' => $value.
 * @param $reset
 *   Whether to reset the internal membership loading cache.
 *
 * @return
 *   An array of membership objects indexed by membership_id.
 */
function redhen_membership_load_multiple($membership_ids = array(), $conditions = array(), $reset = FALSE) {
  if (empty($membership_ids) && empty($conditions)) {
    return array();
  }
  return entity_load('redhen_membership', $membership_ids, $conditions, $reset);
}

/**
 * Saves a membership to the db.
 */
function redhen_membership_save(RedhenMembership $membership) {
  entity_save('redhen_membership', $membership);
}

/**
 * Deletes a membership from the db.
 */
function redhen_membership_delete(RedhenMembership $membership) {
  entity_get_controller('redhen_membership')->delete($membership);
}

/**
 * Archive or restore a membership.
 *
 * @param $membership
 *   The full membership object to save.
 */
function redhen_membership_archive(RedhenMembership $membership) {
  // flip the state and save
  $membership->redhen_state = !$membership->redhen_state;
  redhen_membership_save($membership);
  drupal_set_message(t('@membership has been updated.', array('@membership' => $membership->label())), 'status');

  return $membership;
}

/**
 * Checks membership access for various operations.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create' or
 *   'delete'.
 * @param $membership
 *   Optionally a membership to check access for or for the create operation the
 *   membership type. If nothing is given access permissions for all memberships are returned.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the current user.
 */
function redhen_membership_access($op, $membership = NULL, $account = NULL) {
  global $user;
  $account = isset($account) ? $account : $user;

  if (user_access('administer memberships', $account)) {
    return TRUE;
  }

  if ($op == 'view' && user_access('access memberships', $account)) {
    return TRUE;
  }

  if (isset($membership) && is_string($membership) && $op == 'create' && user_access('create ' . $membership . ' memberships', $account)) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Display a membership.
 *
 * @param  $membership
 *   A Fully loaded membership object.
 * @return void
 */
function redhen_membership_view(RedhenMembership $membership) {
  return $membership->view();
}

/**
 * Title callback for hook_menu().
 *
 * @param  $membership
 *   A loaded membership object.
 * @return void
 */
function redhen_membership_membership_title(RedhenMembership $membership) {
  return $membership->label();
}

/**
 * Implements hook_field_extra_fields().
 */
function redhen_membership_field_extra_fields() {
  $extra = array();

  foreach (redhen_membership_get_types() as $type => $membership_type) {
    $extra['redhen_membership'][$type] = array(
      'form' => array(
        'note' => array(
          'label' => t('Membership note'),
          'description' => t('Membership note'),
          'weight' => 0,
        ),
        'redhen_state' => array(
          'label' => t('State'),
          'description' => t('Membership state'),
          'weight' => 0,
        ),
      ),
      'display' => array(
        'name' => array(
          'label' => t('Name'),
          'description' => t('Membership name.'),
          'weight' => 0,
        ),
        'redhen_state' => array(
          'label' => t('State'),
          'description' => t('Membership state'),
          'weight' => 0,
        ),
      ),
    );
  }

  return $extra;
}

/**
 * Gets an array of all membership types, keyed by the name.
 *
 * @param $name
 *   If set, the type with the given name is returned.
 */
function redhen_membership_get_types($name = NULL) {
  $types = entity_load_multiple_by_name('redhen_membership_type', isset($name) ? array($name) : FALSE);
  return isset($name) ? reset($types) : $types;
}

/**
 * Access callback for the entity API.
 */
function redhen_membership_type_access($op, $type = NULL, $account = NULL) {
  return user_access('administer redhen_membership types', $account);
}

/**
 * Menu argument loader; Load a membership type by string.
 *
 * @param $type
 *   The machine-readable name of a membership type to load.
 * @return
 *   A membership type array or FALSE if $type does not exist.
 */
function redhen_membership_type_load($type) {
  return redhen_membership_get_types($type);
}

/**
 * Saves a model type to the db.
 */
function redhen_membership_type_save(RedhenMembershipType $type) {
  $type->save();
}

/**
 * Deletes a model type from the db.
 */
function redhen_membership_type_delete(RedhenMembershipType $type) {
  $type->delete();
}

/**
 * Implements hook_cron().
 */
function redhen_membership_cron() {

  $activate_results = db_select('redhen_membership', 'me')
    ->fields('me')
    ->condition('redhen_state', REDHEN_STATE_ARCHIVED)
    ->condition('start_date', date('Y-m-d 00:00:00'))
    ->execute()
    ->fetchAllAssoc('membership_id');

  $memberships = redhen_membership_load_multiple(array_keys($activate_results));

  foreach ($memberships as $membership) {
    redhen_membership_toggle_roles($membership);
  }

  $expire_results = db_select('redhen_membership', 'me')
    ->fields('me')
    ->condition('redhen_state', REDHEN_STATE_ACTIVE)
    ->condition('expire_date', date('Y-m-d 00:00:00'))
    ->execute()
    ->fetchAllAssoc('membership_id');

  $memberships = redhen_membership_load_multiple(array_keys($expire_results));

  foreach ($memberships as $membership) {
    redhen_membership_toggle_roles($membership);
  }

}

/**
 * Returns HTML for a list of available membership types for membership creation.
 *
 * @param $variables
 *   An associative array containing:
 *   - content: An array of content types.
 *
 * @ingroup themeable
 */
function theme_redhen_membership_add_list($variables) {
  $content = $variables['content'];
  $output = '';

  if ($content) {
    $output = '<dl class="node-type-list">';
    foreach ($content as $item) {
      $output .= '<dt>' . l($item['title'], $item['href'], $item['localized_options']) . '</dt>';
      $output .= '<dd>' . filter_xss_admin($item['description']) . '</dd>';
    }
    $output .= '</dl>';
  }
  else {
    $output = '<p>' . t('You have not created any membership types yet. Go to the <a href="@create-membership-types">membership type creation page</a> to add a new content type.', array('@create-membership-types' => url('admin/structure/redhen/membership-types'))) . '</p>';
  }
  return $output;
}

  /**
   * Theme function for membership list.
   *
   * @param $variables
   * @return string
   */
function theme_redhen_membership_list($variables) {
  $memberships = $variables['memberships'];
  $header = $variables['header'];
  if (!empty($memberships)) {
    $rows = array();
    foreach($memberships as $membership) {
      $archive = $membership->redhen_state == REDHEN_STATE_ACTIVE ? t('archive') : t('restore');
      $valid = $membership->valid == TRUE ? t('Yes') : t('No');
      $uri = entity_uri('redhen_membership', $membership);
      $actions = array(
        l(t('view'), $uri['path']),
        l(t('edit'), $uri['path'] . '/edit', array('query' => drupal_get_destination())),
        l($archive, $uri['path'] . '/archive', array('query' => drupal_get_destination())),
        l(t('delete'), $uri['path'] . '/delete', array('query' => drupal_get_destination())),
      );

      $membership_type = redhen_membership_type_load($membership->type);
      $entity_uri = entity_uri($membership->entity->entityType(), $membership->entity);
      $data = array(
        $membership_type->label,
        l($membership->entity->label(), $entity_uri['path']),
        ($membership->start_date != '') ? date('m/d/Y', strtotime($membership->start_date)) : '',
        ($membership->expire_date != '') ? date('m/d/Y', strtotime($membership->expire_date)) : '',
        $membership->note,
        $valid,
        implode(' | ', $actions)
        );

      $row_classes = array();
      // Set a class for the row depending on if the membership is active or archived
      $row_classes[] = $membership->redhen_state == REDHEN_STATE_ACTIVE ? 'active' : 'archived';
      // Set a class for the row depending on if the membership is valid or not
      $row_classes[] = $membership->valid == TRUE ? 'valid' : 'invalid';

      $rows[] = array(
        'data' => $data,
        'class' => $row_classes,
      );
    }

    $render['table'] = array(
      '#theme' => 'table',
      '#header' => $header,
      '#rows' => $rows
    );
    $render['pager'] = array(
      '#theme' => 'pager'
    );
  }
  else {
    // no results, set a message
    $render['no-result'] = array(
      '#type' => 'markup',
      '#markup' => t('Sorry, there are no memberships that match your criteria.'),
    );
  }

  return render($render);
}

/**
 * Returns an array of contact ids associated with a membership
 *
 * @param RedhenMembership $membership
 *
 * @return array
 */
function redhen_membership_membership_contacts(RedhenMembership $membership) {
  $contact_ids = array();
  if ($membership->entity_type == 'redhen_contact') {
    $contact_ids[] = $membership->entity_id;
  }
  if ($membership->entity_type == 'redhen_org') {
    // Get all affiliated contact ids.
    $relations = redhen_relation_relations($membership->entity, 'redhen_affiliation');
    foreach ($relations as $relation => $related_entities) {
      foreach ($related_entities as $id => $related_entity) {
        $contact_ids[] = $related_entity->internalIdentifier();
      }
    }
  }
  $contacts = redhen_contact_load_multiple($contact_ids);

  return $contacts;
}

/**
 * Returns an array of memberships associated with a contact
 *
 * @param RedhenContact $contact
 *
 * @return array
 */
function redhen_membership_contact_memberships(RedhenContact $contact) {

  $contact_membership_keys = array();
  $query = new EntityFieldQuery();
  // build the query
  $query
    ->entityCondition('entity_type', 'redhen_membership', '=')
    ->propertyCondition('entity_type', 'redhen_contact')
    ->propertyCondition('entity_id', $contact->internalIdentifier());
  $result = $query->execute();
  if ($result) {
    $contact_membership_keys = array_keys($result['redhen_membership']);
  }

  // Get memberships through org affiliations
  $org_membership_keys = array();
  $org_ids = array();
  // Get all affiliated org ids.
  $relations = redhen_relation_relations($contact, 'redhen_affiliation');
  foreach ($relations as $relation => $related_entities) {
    foreach ($related_entities as $id => $related_entity) {
      $org_ids[] = $related_entity->internalIdentifier();
    }
  }
  if (count($org_ids) > 0) {
    $org_membership_query = new EntityFieldQuery();

    // build the query
    $org_membership_query
      ->entityCondition('entity_type', 'redhen_membership', '=')
      ->propertyCondition('entity_type', 'redhen_org')
      ->propertyCondition('entity_id', $org_ids);

    $org_membership_result = $org_membership_query->execute();
    if ($org_membership_result) {
      $org_membership_keys = array_keys($org_membership_result['redhen_membership']);
    }
  }

  $membership_ids = array_merge($contact_membership_keys, $org_membership_keys);

  return redhen_membership_load_multiple($membership_ids);
}

/**
 * Toggles roles on/off for users associated w/ contacts associated w/ a membership
 *
 * @param RedhenMembership $membership
 * @param array $contacts
 * @param bool $remove
 *  If the role should be removed regardless of validity
 */
function redhen_membership_toggle_roles(RedhenMembership $membership, $contacts = array(), $remove = FALSE) {
  $membership_types = redhen_membership_get_types();
  // If there is a role set for this membership type
  $membership_rid = $membership_types[$membership->type]->role_id;
  if (!empty($membership_rid)) {
    // If not provided, get the contacts associated with this membership
    if (empty($contacts)) {
      $contacts = redhen_membership_membership_contacts($membership);
    }
    foreach ($contacts as $contact) {
      if (isset($contact->user)) {
        if ( ($membership->valid()) && (!$remove) ) {
          // only set if the user doesn't already have this role
          if (!isset($contact->user->roles[$membership_rid])) {
            $contact->user->roles[] = $membership_rid;
          }
        } else {
          // Get all memberships for this contact and look for valid memberships
          $contact_memberships = redhen_membership_contact_memberships($contact);

          // Iterate through the memberships looking for valid memberships that assign the role we want to delete.
          $delete = TRUE;

          if (!$remove) {
            foreach ($contact_memberships as $contact_membership) {
              $contact_membership_rid = $membership_types[$contact_membership->type]->role_id;
              if ( ($contact_membership->valid()) && (isset($contact_membership_rid)) && ($contact_membership_rid == $membership_rid) ) {
                // Found a matching valid membership with the same role, abort the deletion
                $delete = FALSE;
              }
            }
          }

          if ($delete) {
            // No valid memberships with the same role_id were found, so we go ahead and delete
            unset($contact->user->roles[$membership_rid]);
          }
        }
        user_save($contact->user);
      }
    }
  }
}

/**
 * Standard membership query
 *
 * @param $entity_type
 * @param $entity
 * @return array|bool
 */
function redhen_membership_query($entity_type, $entity) {

  $membership_query = new EntityFieldQuery();

  // build the query
  $membership_query
    ->entityCondition('entity_type', 'redhen_membership', '=')
    ->propertyCondition('entity_type', $entity_type)
    ->propertyCondition('entity_id', entity_id($entity_type, $entity));

  $membership_results = $membership_query->execute();
  if (isset($membership_results['redhen_membership'])) {
    $memberships = redhen_membership_load_multiple(array_keys($membership_results['redhen_membership']));
  } else {
    $memberships = FALSE;
  }

  return $memberships;
}

/**
 * Implements hook_ENTITY_TYPE_update().
 *
 * If there is a user associated with a contact, see if we need to set their role based on the contact's membership(s)
 *
 * @param RedhenContact $contact
 *   The redhen_contact that is being updated.
 */
function redhen_membership_redhen_contact_update(RedhenContact $contact) {
  if ($contact->user_uid) {
    // Get all the memberships associated with this user
    $memberships = redhen_membership_contact_memberships($contact);
    foreach ($memberships as $membership) {
      // If the contact is archived and this membership is attached to the contact, archive the membership
      if ( ($contact->redhen_state !== REDHEN_STATE_ACTIVE) && ($membership->redhen_state == REDHEN_STATE_ACTIVE) &&
        ($membership->entity_type == 'redhen_contact') && ($membership->entity_id == $contact->contact_id) ) {
        $membership = redhen_membership_archive($membership);
      }
      // Don't need this for the archive action, but do need it to catch new user linkage
      redhen_membership_toggle_roles($membership, array($contact));

    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 *
 * @param RedHenOrg $org
 *   The redhen_org that is being updated.
 */
function redhen_membership_redhen_org_update(RedHenOrg $org) {
  // Get all the memberships associated with this organization
  $memberships = redhen_membership_query('redhen_org', $org);
  foreach ($memberships as $membership) {
    // If the organization is archived and this membership is attached to the org, archive the membership
    if ( ($org->redhen_state !== REDHEN_STATE_ACTIVE) && ($membership->redhen_state == REDHEN_STATE_ACTIVE) ) {
      redhen_membership_archive($membership);
    }
  }
}

/**
 * Implements hook_redhen_contact_user_remove().
 */
function redhen_membership_redhen_contact_user_remove($delete, RedhenContact $contact) {
  // Get all the memberships associated with this user
  $memberships = redhen_membership_contact_memberships($contact);
  foreach ($memberships as $membership) {
    redhen_membership_toggle_roles($membership, array($contact), TRUE);
  }
}

/**
 * Implements hook_entity_insert().
 *
 * React to entity insertions that require roles to be toggled
 */
function redhen_membership_entity_insert($entity, $entity_type) {
  if ( ($entity_type == 'relation') && ($entity->relation_type == 'redhen_affiliation') ) {
    redhen_membership_relation_toggle($entity);
  }
}

/**
 * Implements hook_entity_delete().
 *
 * React to entity insertions that require roles to be toggled
 */
function redhen_membership_entity_delete($entity, $entity_type) {
  switch ($entity_type) {
    case 'relation':
      if ($entity->relation_type == 'redhen_affiliation') {
        redhen_membership_relation_toggle($entity);
      }
      break;
    case 'redhen_contact':
      if ($entity->user_uid) {
        // Get all the memberships associated with this user
        $memberships = redhen_membership_contact_memberships($entity);
        foreach ($memberships as $membership) {
          redhen_membership_toggle_roles($membership, array($entity), TRUE);
        }
      }
      // no break because we want to run the code below redhen_org as well
    case 'redhen_org':
      $memberships = redhen_membership_query($entity_type, $entity);
      foreach ($memberships as $membership) {
        redhen_membership_delete($membership);
      }
      break;
  }
}

/**
 * Toggle memberships based on a specific relation object.
 *
 * @param $relation
 */
function redhen_membership_relation_toggle($relation) {
  foreach ($relation->endpoints[LANGUAGE_NONE] as $endpoint) {
    // Find the contact endpoint
    if ($endpoint['entity_type'] == 'redhen_contact') {
      $contact = redhen_contact_load($endpoint['entity_id']);
      // Contact may already be deleted
      if ($contact) {
        $memberships = redhen_membership_contact_memberships($contact);
        foreach ($memberships as $membership) {
          redhen_membership_toggle_roles($membership, array($contact));
        }
      }
    }
  }  
}
