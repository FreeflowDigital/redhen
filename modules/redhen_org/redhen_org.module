<?php

/**
 * @file
 * Redhen Organizations main module
 *
 */


/**
 * Implements hook_entity_info().
 */
function redhen_org_entity_info() {
  return array(
    'redhen_org' => array(
      'label' => t('Org'),
      'controller class' => 'RedhenOrgEntityController',
      'metadata controller class' => 'RedhenOrgMetadataController',
      'entity class' => 'RedhenOrg',
      'base table' => 'redhen_org',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'org_id',
        'bundle' => 'type',
      ),
      'bundle keys' => array(
        'bundle' => 'name',
      ),
      'bundles' => array(),
      'view modes' => array(
        'full' => array(
          'label' => t('Full organization'),
          'custom settings' => FALSE,
        ),
      ),
      'uri callback' => 'entity_class_uri',
      'token type' => 'redhen_org',
      'module' => 'redhen_org',
      'label callback' => 'entity_class_label'
    ),
    'redhen_org_type' => array(
      'label' => t('Organization type'),
      'entity class' => 'RedhenOrgType',
      'controller class' => 'EntityAPIControllerExportable',
      'base table' => 'redhen_org_type',
      'fieldable' => FALSE,
      'bundle of' => 'redhen_org',
      'exportable' => TRUE,
      'token type' => 'redhen_org_type',
      'entity keys' => array(
        'id' => 'org_type_id',
        'name' => 'name',
        'label' => 'label',
      ),
      'access callback' => 'redhen_org_type_access',
      'module' => 'redhen_org',
      // Enable the entity API's admin UI.
      'admin ui' => array(
        'path' => 'admin/structure/redhen/org_types',
        'file' => 'redhen_org_type.admin.inc',
        'file path' => drupal_get_path('module', 'redhen_org') . '/includes',
        'controller class' => 'RedhenOrgTypeUIController',
      ),
    ),
  );
}

/**
 * Implements hook_entity_info_alter().
 *
 * We are adding the info about the organization types via a hook to avoid a recursion
 * issue as loading the model types requires the entity info as well.
 */
function redhen_org_entity_info_alter(&$entity_info) {
  foreach (redhen_org_get_types() as $type => $info) {
    $entity_info['redhen_org']['bundles'][$type] = array(
      'label' => $info->label,
      'admin' => array(
        'path' => 'admin/structure/redhen/org_types/manage/%redhen_org_type',
        'real path' => 'admin/structure/redhen/org_types/manage/' . $type,
        'bundle argument' => 5,
        'access arguments' => array('administer redhen_org types'),
      ),
    );
  }
}

/**
 * Implements hook_menu().
 */
function redhen_org_menu() {
  $items = array();

  // Add a org.
  $items['redhen/org'] = array(
    'title' => 'Organizations',
    'description' => 'View RedHen CRM Organizations.',
    'page callback' => 'redhen_org_page',
    'access arguments' => array('view orgs'),
  );

  // Add a org.
  $items['redhen/org/add'] = array(
    'title' => 'Add an organization',
    'description' => 'Add a new organization.',
    'page callback' => 'redhen_org_add_page',
    'access callback' => 'redhen_org_access',
    'access arguments' => array('create'),
    'file' => 'includes/redhen_org.forms.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $entity_info = entity_get_info('redhen_org');
  foreach($entity_info['bundles'] as $key => $bundle) {
    $type_url_str = str_replace('_', '-', $key);
    $items['redhen/org/add/' . $type_url_str] = array(
      'title' => $bundle['label'],
      'title callback' => 'check_plain',
      'description' => isset($bundle['description']) ? $bundle['description'] : '',
      'page callback' => 'redhen_org_add',
      'page arguments' => array($key),
      'access callback' => 'redhen_org_access',
      'access arguments' => array('create'),
      'file' => 'includes/redhen_org.forms.inc',
    );
  }

  $items['redhen/org/%redhen_org'] = array(
    'title callback' => 'redhen_org_org_title',
    'title arguments' => array(2),
    'page callback' => 'redhen_org_view',
    'page arguments' => array(2),
    'access callback' => 'redhen_org_access',
    'access arguments' => array('view', 2),
    'weight' => 10,
  );
  $items['redhen/org/%redhen_org/view'] = array(
    'title' => 'Summary',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  $items['redhen/org/%redhen_org/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('redhen_org_org_delete_form', 2),
    'access callback' => 'redhen_org_access',
    'access arguments' => array('delete', 2),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
    'file' => 'includes/redhen_org.forms.inc',
  );
  $items['redhen/org/%redhen_org/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('redhen_org_org_form', 2),
    'access callback' => 'redhen_org_access',
    'access arguments' => array('edit', 2),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/redhen_org.forms.inc',
  );

  $items['redhen/org/%redhen_org/archive'] = array(
    'title' => 'Archive',
    'page callback' => 'redhen_org_archive',
    'page arguments' => array(2),
    'access callback' => 'redhen_org_access',
    'access arguments' => array('edit', 2),
    'type' => MENU_CALLBACK,
  );

  if (module_exists('devel')) {
    $items['redhen/org/%redhen_org/devel'] = array(
      'title' => 'Devel',
      'page callback' => 'redhen_devel_load_object',
      'page arguments' => array('redhen_org', 2),
      'access arguments' => array('access devel information'),
      'type' => MENU_LOCAL_TASK,
      'weight' => 100,
    );
    $items['redhen/org/%redhen_org/devel/load'] = array(
      'title' => 'Load',
      'type' => MENU_DEFAULT_LOCAL_TASK,
    );
    $items['redhen/org/%redhen_org/devel/render'] = array(
      'title' => 'Render',
      'page callback' => 'redhen_devel_render_object',
      'page arguments' => array('redhen_org', 2),
      'access arguments' => array('access devel information'),
      'type' => MENU_LOCAL_TASK,
      'weight' => 100,
    );
  }

  return $items;
}

/**
 * Implements hook_theme().
 */
function redhen_org_theme() {
  return array(
    'redhen_org_add_list' => array(
      'variables' => array('content' => NULL),
      'file' => 'includes/redhen_org.forms.inc',
    )
  );
}

/**
 * Loads an org by ID.
 */
function redhen_org_load($org_id) {
  if (empty($org_id)) {
    return FALSE;
  }

  $orgs = redhen_org_load_multiple(array($org_id), array());
  return $orgs ? reset($orgs) : FALSE;
}

/**
 * Loads multiple orgs by ID or based on a set of matching conditions.
 *
 * @see entity_load()
 *
 * @param $org_ids
 *   An array of org IDs.
 * @param $conditions
 *   An array of conditions on the {redhen_org} table in the form
 *     'field' => $value.
 * @param $reset
 *   Whether to reset the internal org loading cache.
 *
 * @return
 *   An array of org objects indexed by org_id.
 */
function redhen_org_load_multiple($org_ids = array(), $conditions = array(), $reset = FALSE) {
  if (empty($org_ids) && empty($conditions)) {
    return array();
  }

  return entity_load('redhen_org', $org_ids, $conditions, $reset);
}

/**
 * Deletes multiple orgs by ID.
 *
 * @param $org_ids
 *   An array of org IDs to delete.
 *
 * @return
 *   TRUE on success, FALSE otherwise.
 */
function redhen_org_delete_multiple($org_ids) {
  return entity_get_controller('redhen_org')->delete($org_ids);
}

/**
 * Saves a org.
 *
 * @param $org
 *   The full org object to save.
 *
 * @return
 *   The saved org object.
 */
function redhen_org_save($org) {
  return entity_get_controller('redhen_org')->save($org);
}

/**
 * Archive a org.
 *
 * @param $org
 *   The full org object to save.
 *
 * @return
 *   The saved org object.
 */
function redhen_org_archive($org) {
  $org->redhen_state = REDHEN_STATE_ARCHIVED;
  redhen_org_save($org);
  drupal_goto(drupal_get_destination());
}


/**
 * Checks org access for various operations.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create' or
 *   'delete'.
 * @param $org
 *   Optionally a org to check access for or for the create operation the
 *   org type. If nothing is given access permissions for all orgs are returned.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the current user.
 */
function redhen_org_access($op, $org = NULL, $account = NULL) {
  global $user;
  $account = isset($account) ? $account : $user;

  if (user_access('administer orgs', $account)) {
    return TRUE;
  }

  if ($op == 'view' && user_access('access orgs', $account)) {
    return TRUE;
  }

  if (isset($org) && is_string($org) && $op == 'create' && user_access('create ' . $org . ' orgs', $account)) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Display a org.
 *
 * @param  $org
 *   A Fully loaded org object.
 * @return void
 */
function redhen_org_view(RedhenOrg $org) {
  return $org->view();
}

/**
 * Title callback for hook_menu().
 *
 * @param  $org
 *   A loaded org object.
 * @return void
 */
function redhen_org_org_title(RedhenOrg $org) {
  return $org->label();
}

/**
 * Page callback for org overview page.
 */
function redhen_org_page() {
  $orgs = array();

  $query = new EntityFieldQuery();

  // setup the header for both the query and table
  $header = array(
    'label' => array('field' => 'label', 'type' => 'property', 'data' => 'Label', 'sort' => 'asc', 'specifier' => 'label'),
    'Actions',
  );

  // build the query
  $query
    ->entityCondition('entity_type', 'redhen_org', '=')
    ->tablesort($header)
    ->pager(10);

  // set the org type
  if (isset($_GET['type']) && !empty($_GET['type'])) {
    $query->propertyCondition('type', $_GET['type'], '=');
  }

  // add prop filters
  if (isset($_GET['properties'])) {
    foreach($_GET['properties'] as $key => $value) {
      if (!empty($value)) {
        $query->propertyCondition($key, $value, '=');
      }
    }
  }

  // add field filters
  if (isset($_GET['fields'])) {
    foreach($_GET['fields'] as $key => $value) {
      if (!empty($value)) {
        $query->fieldCondition($key, NULL, $value, '=');
      }
    }
  }

  $result = $query->execute();

  $rows = array();
  if ($result) {
    $orgs = redhen_org_load_multiple(array_keys($result['redhen_org']));

    foreach($orgs as $org) {
      $actions = array(
        l('view', 'redhen/org/' . $org->org_id),
        l('edit', 'redhen/org/' . $org->org_id . '/edit', array('query' => drupal_get_destination())),
        l('archive', 'redhen/org/' . $org->org_id . '/archive', array('query' => drupal_get_destination())),
        l('delete', 'redhen/org/' . $org->org_id . '/delete', array('query' => drupal_get_destination())),
      );
      $rows[] = array(
        'data' => array($org->label, implode(' | ', $actions))
      );
    }
  }
  else {
    // no results, set a message
    $rows[] = array(
      'data' => array(array('data' => t('Sorry, there are no organizations that match your criteria.'), 'colspan' => 3))
    );
  }

  $entity_info = entity_get_info('redhen_org');
  $property_info = entity_get_property_info('redhen_org');
  $form = drupal_get_form('redhen_org_filter_form', $entity_info, $property_info);

  // return a themed table
  return drupal_render($form) . theme('table', array('header' => $header, 'rows' => $rows)) . theme('pager');
}

/**
 * Returns the form to filter org lists.
 */
function redhen_org_filter_form($form, $form_state, $entity_info, $property_info) {
  $form = array();

  if (!empty($property_info['properties'])) {
    $form['filter_fieldset'] = array(
      '#type' => 'fieldset',
      '#title' => t('Filters'),
      '#collapsible' => TRUE,
      // expand fieldset if the list was filtered
      '#collapsed' => (empty($_GET['properties']) && empty($_GET['fields']))
    );

    $form['filter_fieldset']['filters'] = array(
      '#type' => 'container',
      '#tree' => TRUE
    );

    $form['filter_fieldset']['filters']['properties'] = array(
      '#type' => 'container',
    );

    // add a form field for each property
    foreach($property_info['properties'] as $key => $prop) {
      $form['filter_fieldset']['filters']['properties'][$key] = array(
        '#type' => $prop['type'],
        '#title' => $prop['label'],
        '#default_value' => isset($_GET[$key]) ? $_GET[$key] : NULL
      );

      if ($prop['type'] == 'select' && !empty($prop['options'])) {
        $form['filter_fieldset']['filters']['properties'][$key]['#options'] = $prop['options'];
      }
    }

    // add org type; will load additional field filters on change
    $type_options = array('' => t('-- Any --'));
    foreach($entity_info['bundles'] as $key => $bundle) {
      $type_options[$key] = $bundle['label'];
    }
    $form['filter_fieldset']['filters']['type'] = array(
      '#type' => 'select',
      '#title' => t('Organization type'),
      '#options' => $type_options,
      '#default_value' => isset($_GET['type']) ? $_GET['type'] : NULL,
      '#ajax' => array(
        'callback' => 'redhen_org_get_fields_callback',
        'wrapper' => 'redhen_org_fields_container'
      )
    );

    $form['filter_fieldset']['filters']['fields'] = array(
      '#prefix' => '<div id="redhen_org_fields_container">',
      '#suffix' => '</div>'
    );

    $form['filter_fieldset']['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Apply')
    );

    $form['filter_fieldset']['reset'] = array(
      '#type' => 'submit',
      '#value' => t('Reset'),
      '#limit_validation_errors' => array(),
      '#submit' => array('redhen_org_filter_form_reset')
    );
  }

  // add the fields on an ajax type change event or if a filter is being passed
  if (!empty($form_state['values']['filters']['type']) || isset($_GET['type'])) {
    $type = !empty($form_state['values']['filters']['type']) ?
      $form_state['values']['filters']['type'] : $_GET['type'];

    $fields = field_info_instances('redhen_org', $type);
    if (!empty($fields)) {
      $form['filter_fieldset']['filters']['fields'] = array(
        '#type' => 'fieldset',
        '#title' => t('Additional Fields for @type', array('@type' => $type)),
        '#collapsible' => FALSE,
        '#id' => 'redhen_org_fields_container'
      );

      foreach($fields as $key => $field) {
        $form['filter_fieldset']['filters']['fields'][$key] = array(
          '#type' => 'textfield',
          '#title' => $field['label'],
          '#default_value' => isset($_GET['fields'][$key]) ? $_GET['fields'][$key] : NULL,
        );
      }
    }
  }

  return $form;
}

/**
 * AJAX callback to return fields for a given type.
 */
function redhen_org_get_fields_callback($form, $form_state) {
  return $form['filter_fieldset']['filters']['fields'];
}

/**
 * Submit handler for redhen_org_filter_form().
 */
function redhen_org_filter_form_submit($form, $form_state) {
  drupal_goto($_GET['q'], array('query' => $form_state['values']['filters']));
}

function redhen_org_filter_form_reset() {
  drupal_goto('redhen/org');
}

/**
 * Implements hook_field_extra_fields().
 */
function redhen_org_field_extra_fields() {
  $extra = array();

  foreach (redhen_org_get_types() as $type => $org_type) {
    $extra['redhen_org'][$type] = array(
      'form' => array(
        'name' => array(
          'label' => t('Organization name'),
          'description' => t('Organization name'),
          'weight' => 0,
        ),
        'redhen_state' => array(
          'label' => t('State'),
          'description' => t('Organization state'),
          'weight' => 0,
        ),
      ),
      'display' => array(
        'name' => array(
          'label' => t('Name'),
          'description' => t('Organization name.'),
          'weight' => 0,
        ),
        'redhen_state' => array(
          'label' => t('State'),
          'description' => t('Organization state'),
          'weight' => 0,
        ),
      ),
    );
  }

  return $extra;
}

/**
 * Gets an array of all org types, keyed by the name.
 *
 * @param $name
 *   If set, the type with the given name is returned.
 */
function redhen_org_get_types($name = NULL) {
  $types = entity_load_multiple_by_name('redhen_org_type', isset($name) ? array($name) : FALSE);
  return isset($name) ? reset($types) : $types;
}

/**
 * Access callback for the entity API.
 */
function redhen_org_type_access($op, $type = NULL, $account = NULL) {
  return user_access('administer redhen_org types', $account);
}

/**
 * Menu argument loader; Load an organization type by string.
 *
 * @param $type
 *   The machine-readable name of an organization type to load.
 * @return
 *   An organization type array or FALSE if $type does not exist.
 */
function redhen_org_type_load($type) {
  return redhen_org_get_types($type);
}

/**
 * Saves a model type to the db.
 */
function redhen_org_type_save(RedhenOrgType $type) {
  $type->save();
}

/**
 * Deletes a model type from the db.
 */
function redhen_org_type_delete(RedhenOrgType $type) {
  $type->delete();
}
